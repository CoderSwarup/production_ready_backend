openapi: 3.0.3
info:
  title: VideoTube - The Production Ready Application
  description: >-
    # VideoTube API Documentation

    Welcome to the API documentation for VideoTube, a production-ready application developed by CoderSwarup. This API serves as a key component in your journey to mastering backend development by guiding you through the creation of a YouTube-like video-sharing platform. Explore the rich features and gain hands-on experience in building a robust and scalable backend system.

    ## Features

    - **Production Ready:** VideoTube is meticulously designed to be production-ready, ensuring reliability, scalability, and efficiency in handling user registrations. Through this API, you'll learn best practices in building a resilient backend infrastructure.

    ## üéì Learning Backend Development with VideoTube

    Embark on a comprehensive learning experience in backend development as you delve into the creation of a YouTube application clone. The API documentation provides insights into the following key areas:

    - **GitHub Repository:** Access the complete source code and project setup instructions on [GitHub](https://github.com/CoderSwarup). Follow the provided installation instructions to set up VideoTube on your local environment.

    - **Special Thanks:** A special thanks to the creator of the main repository used for learning, [Hitesh Choudhary](https://github.com/hiteshchoudhary/chai-backend). The VideoTube project builds upon the foundation laid by the Chai Backend repository, contributing to an enriching learning experience.

    - **Reporting Issues:** Experience real-world scenarios by testing the API. If you encounter any issues or bugs, contribute to the development process by creating an [issue](https://github.com/CoderSwarup/issues/new) on the GitHub repository. Assign it to a team member for collaborative problem-solving.

    ## üèÅ Installation

    To initiate your journey, follow the [installation instructions](https://github.com/CoderSwarup) provided on the GitHub repository. This step-by-step guide ensures a seamless setup of VideoTube on your local environment.

    ## üêû Reporting Issues

    As you progress in your learning journey, encountering challenges is natural. Report any issues or bugs you find during API testing by creating an [issue](https://github.com/CoderSwarup/issues/new). This collaborative approach fosters a vibrant learning environment and contributes to the continuous improvement of VideoTube.

    ## Contact

    For further inquiries or discussions about your learning journey, please reach out to the development team through the provided contact information.

  version: 1.0.0
  contact: {}
servers:
  - url: 'http://localhost:3000/api/v1'
paths:
  /healthcheck:
    get:
      summary: Health Check Route
      tags:
        - Health Check
      description: Endpoint to check the health status of the server.
      responses:
        '200':
          description: OK. Server is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  message:
                    type: string
                    example: 'Server is healthy'

  /users/register:
    post:
      summary: Register a new user
      description: Register a new user with username, email, fullName, password, avatar, and cover image.
      tags:
        - Users
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                fullName:
                  type: string
                password:
                  type: string
                avatar:
                  type: string
                  format: binary
                coverimage:
                  type: string
                  format: binary
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request, check the request payload
          content:
            application/json:
              example:
                error: All fields are required
        '422':
          description: Unprocessable Entity, check the request payload
          content:
            application/json:
              example:
                error: Fields can't be empty
        '409':
          description: Conflict, email or username already in use
          content:
            application/json:
              example:
                error: Email or Username already in use

  # Login Route
  /users/login:
    post:
      summary: Log in a user
      description: Log in a user with email, username, and password.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request, check the request payload
          content:
            application/json:
              example:
                error: Username or Email is Required
        '401':
          description: Unauthorized, invalid credentials
          content:
            application/json:
              example:
                error: Invalid Credentials
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User Is Not Register
      security: []

  # Logout User Route
  /users/logout:
    post:
      summary: Logout a user
      description: Clear user tokens and log them out.
      tags:
        - Users
      security:
        - cookieAuth: [] # Assuming you have a security definition named 'cookieAuth'
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Unauthorized, user not authenticated
          content:
            application/json:
              example:
                error: Unauthorized
      requestBody:
        required: false
      operationId: logoutUser

  # Refresh Token Route
  /users/refresh-token:
    post:
      summary: Refresh user access token
      description: Refresh user access token using a valid refresh token.
      tags:
        - Users
      security:
        - cookieAuth: [] # Assuming you have a security definition named 'cookieAuth'

      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefreshResponse'
        '401':
          description: Unauthorized, invalid or expired refresh token
          content:
            application/json:
              example:
                error: Invalid or expired refresh token

  # update Password
  /users/updatePassword:
    put:
      summary: Update user password
      description: Update user password with new password and confirmation.
      tags:
        - Users
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
                confirmPassword:
                  type: string
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              example:
                message: Password updated successfully
        '400':
          description: Bad request, check the request payload
          content:
            application/json:
              example:
                error: New password and confirm password do not match
        '401':
          description: Unauthorized, invalid old password
          content:
            application/json:
              example:
                error: Old password is wrong
      operationId: updatePassword

  # get Details Of Current Login User
  /users/get-user-details:
    get:
      summary: Get details of the currently logged-in user
      description: Retrieve details of the user currently authenticated through JWT.
      tags:
        - Users
      security:
        - cookieAuth: [] # Assuming you have a security definition named 'cookieAuth'
      responses:
        '200':
          description: User details fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized, user not authenticated
          content:
            application/json:
              example:
                error: Unauthorized
      operationId: getCurrentUser

  # Update User Details
  /users/update-user:
    post:
      summary: Update user details
      description: Update the details (username, email, fullName) of the currently logged-in user.
      tags:
        - Users
      security:
        - cookieAuth: [] # Assuming you have a security definition named 'cookieAuth'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                fullName:
                  type: string
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized, user not authenticated
          content:
            application/json:
              example:
                error: Unauthorized
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User Not Found
      operationId: updateUserDetails

  # Update Avatar
  /users/update/user-avatar:
    post:
      summary: Update user avatar
      description: Update the avatar image of the currently logged-in user.
      tags:
        - Users
      security:
        - cookieAuth: [] # Assuming you have a security definition named 'cookieAuth'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: Avatar image updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' # Assuming your User schema
        '400':
          description: Bad request, check the request payload
          content:
            application/json:
              example:
                error: Please Select Image
        '401':
          description: Unauthorized, user not authenticated
          content:
            application/json:
              example:
                error: Unauthorized
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User Not Found
        '422':
          description: Unprocessable Entity, image uploadation error
          content:
            application/json:
              example:
                error: Images Uploadation Error
      operationId: updateUserAvatar

  # Update Cover Image
  /users/update/user-coverimage:
    post:
      summary: Update user cover image
      description: Update the cover image of the currently logged-in user.
      tags:
        - Users
      security:
        - cookieAuth: [] # Assuming you have a security definition named 'cookieAuth'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                coverimage:
                  type: string
                  format: binary
      responses:
        '200':
          description: Cover image updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' # Assuming your User schema
        '400':
          description: Bad request, check the request payload
          content:
            application/json:
              example:
                error: Please Select Image
        '401':
          description: Unauthorized, user not authenticated
          content:
            application/json:
              example:
                error: Unauthorized
        '402':
          description: Images Deletion Error
          content:
            application/json:
              example:
                error: Images Deletion Error
        '422':
          description: Unprocessable Entity, images uploadation error
          content:
            application/json:
              example:
                error: Images Uploadation Error
      operationId: updateUserCoverImage

  #get User Channel Details
  /users/channelprofile/{username}:
    get:
      summary: Get user channel profile
      description: Retrieve details of a user's channel profile.
      tags:
        - Users
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user whose channel profile is to be retrieved.
      responses:
        '200':
          description: User channel profile fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserChannelProfile'
        '400':
          description: Bad request, check the request parameters
          content:
            application/json:
              example:
                error: Username parameter missing
        '404':
          description: Channel not found
          content:
            application/json:
              example:
                error: Channel is Not Present
        '401':
          description: Unauthorized, user not authenticated
          content:
            application/json:
              example:
                error: Unauthorized

  # Toggle Video Like
  /likes/toggle/v/{videoId}:
    post:
      summary: Toggle video like
      description: Toggle like on a video.
      tags:
        - Likes
      parameters:
        - in: path
          name: videoId
          required: true
          schema:
            type: string
          description: The ID of the video to toggle like.
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Like toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Like toggled successfully
        '401':
          description: Unauthorized, user not authenticated
          content:
            application/json:
              example:
                error: Unauthorized

  # Toggle Comment Like
  /likes/toggle/c/{commentId}:
    post:
      summary: Toggle comment like
      description: Toggle like on a comment.
      tags:
        - Likes
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: string
          description: The ID of the comment to toggle like.
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Like toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Like toggled successfully
        '401':
          description: Unauthorized, user not authenticated
          content:
            application/json:
              example:
                error: Unauthorized

  # Toggle Tweet Like
  /likes/toggle/t/{tweetId}:
    post:
      summary: Toggle like on a tweet
      description: Toggle like on a tweet with the specified ID.
      tags:
        - Likes
      parameters:
        - in: path
          name: tweetId
          required: true
          schema:
            type: string
          description: The ID of the tweet to toggle like.
      security:
        - cookieAuth: [] # Assuming you have a security definition named 'cookieAuth'
      responses:
        '200':
          description: Like toggled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized, user not authenticated
          content:
            application/json:
              example:
                error: Unauthorized

  # get User Liked Videos

  /likes/videos:
    get:
      summary: Get liked videos
      description: Retrieve a list of videos liked by the authenticated user.
      tags:
        - Likes
      security:
        - cookieAuth: [] # Assuming you have a security definition named 'cookieAuth'
      responses:
        '200':
          description: Liked videos fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Video'
        '401':
          description: Unauthorized, user not authenticated
          content:
            application/json:
              example:
                error: Unauthorized

  # retrive the List of the Subscribers of the Channel
  /subscriptions/c/{channelId}:
    get:
      summary: Get subscribers of a channel
      description: Retrieve a list of subscribers of the specified channel.
      tags:
        - Subscriptions
      parameters:
        - in: path
          name: channelId
          required: true
          schema:
            type: string
          description: The ID of the channel to get subscribers.
      responses:
        '200':
          description: Subscribers fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    # toggle Subscription
    post:
      summary: Toggle subscription to a channel
      description: Toggle subscription to the specified channel.
      tags:
        - Subscriptions
      parameters:
        - in: path
          name: channelId
          required: true
          schema:
            type: string
          description: The ID of the channel to toggle subscription.
      security:
        - cookieAuth: [] # Assuming you have a security definition named 'cookieAuth'
      responses:
        '200':
          description: Subscription toggled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized, user not authenticated
          content:
            application/json:
              example:
                error: Unauthorized

  # Get the User Subscribed Channel
  /subscriptions/u/{subscriberId}:
    get:
      summary: Get subscribed channels of a user
      description: Retrieve a list of channels subscribed by the specified user.
      tags:
        - Subscriptions
      parameters:
        - in: path
          name: subscriberId
          required: true
          schema:
            type: string
          description: The ID of the user to get subscribed channels.
      responses:
        '200':
          description: Subscribed channels fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    # get Comment and Add comment
  /comments/{videoId}:
    get:
      summary: Get comments for a video
      description: Retrieve comments for a specific video.
      tags:
        - Comment
      parameters:
        - in: path
          name: videoId
          required: true
          schema:
            type: string
          description: The ID of the video to retrieve comments for.
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of comments per page
      responses:
        '200':
          description: Comments fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'

    post:
      summary: Add a comment to a video
      description: Add a new comment to the specified video.
      tags:
        - Comment
      parameters:
        - in: path
          name: videoId
          required: true
          schema:
            type: string
          description: ID of the video to add a comment to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request
          content:
            application/json:
              example:
                error: All fields are required
        '404':
          description: Video not found
          content:
            application/json:
              example:
                error: Video not found

  # delete and Update Comment
  /comments/c/{commentId}:
    delete:
      summary: Delete a comment
      description: Delete a comment by its ID.
      tags:
        - Comment
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: string
          description: ID of the comment to delete
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comment deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              example:
                error: You don't have access to delete this comment

    patch:
      summary: Update a comment
      description: Update the content of a comment.
      tags:
        - Comment
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: string
          description: ID of the comment to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comment updated successfully
        '400':
          description: Bad request
          content:
            application/json:
              example:
                error: You don't have access to update this comment

  # get channelstats
  /dashboard/stats/{channelid}:
    get:
      summary: Get channel statistics
      description: Retrieve statistics for a specific channel including total video views, total subscribers, total videos, and total likes.
      tags:
        - dashboard
      parameters:
        - in: path
          name: channelid
          required: true
          schema:
            type: string
          description: The ID of the channel to retrieve statistics for.
      responses:
        '200':
          description: Channel statistics fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelStats'
        '401':
          description: Not accessible
          content:
            application/json:
              example:
                error: Not Accessible

  # get Channel Videos
  /dashboard/videos/{channelid}:
    get:
      summary: Get channel videos
      description: Retrieve videos uploaded by the specified channel.
      tags:
        - dashboard
      parameters:
        - in: path
          name: channelid
          required: true
          schema:
            type: string
          description: The ID of the channel to retrieve videos for.
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of videos per page
        - in: query
          name: sortBy
          schema:
            type: string
          description: Field to sort by (e.g., createdAt, views)
        - in: query
          name: sortType
          schema:
            type: string
            enum: [asc, desc]
          description: Sorting order (asc for ascending, desc for descending)
      responses:
        '200':
          description: Channel videos fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelVideos'

  #videos  GET ALL Videos And Publish New Video
  /videos:
    get:
      summary: Get all videos
      description: Retrieve a list of videos based on query, pagination, and sorting.
      tags:
        - videos
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of videos per page
        - in: query
          name: query
          schema:
            type: string
          description: Search query to filter videos by title, description, or slug
        - in: query
          name: sortBy
          schema:
            type: string
          description: Field to sort by (e.g., createdAt, views)
        - in: query
          name: sortType
          schema:
            type: string
            enum: [asc, desc]
          description: Sorting order (asc for ascending, desc for descending)
      responses:
        '200':
          description: List of videos fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoList'
    post:
      summary: Publish a video
      description: Publish a new video.
      tags:
        - videos
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                videoFile:
                  type: string
                  format: binary
                thumbnail:
                  type: string
                  format: binary

      responses:
        '200':
          description: Video published successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  # get , Delete and Update video based on the id
  /videos/{videoId}:
    get:
      summary: Get video by ID
      description: Retrieve a video by its ID.
      tags:
        - videos
      parameters:
        - in: path
          name: videoId
          required: true
          schema:
            type: string
          description: The ID of the video to retrieve
      responses:
        '200':
          description: Video fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      summary: Delete video
      description: Delete a video by its ID.
      tags:
        - videos
      parameters:
        - in: path
          name: videoId
          required: true
          schema:
            type: string
          description: The ID of the video to delete
      responses:
        '200':
          description: Video deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    patch:
      summary: Update video
      description: Update details of a video.
      tags:
        - videos
      parameters:
        - in: path
          name: videoId
          required: true
          schema:
            type: string
          description: The ID of the video to update
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                thumbnail:
                  type: string
                  format: binary
      responses:
        '200':
          description: Video updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  # Toggle Video Publish
  /videos/toggle/publish/{videoId}:
    patch:
      summary: Toggle publish status
      description: Toggle the publish status of a video.
      tags:
        - videos
      parameters:
        - in: path
          name: videoId
          required: true
          schema:
            type: string
          description: The ID of the video to toggle publish status for
      responses:
        '200':
          description: Publish status toggled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

# Components
components:
  schemas:
    #Main Models
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        fullName:
          type: string
        avatar:
          type: string
        coverImage:
          type: string
        watchHistory:
          type: array
          items:
            type: string # Assuming Video IDs are string
        password:
          type: string
        refreshToken:
          type: string
      required:
        - username
        - email
        - fullName
        - avatar
        - password

    # Response Schema
    LoginResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        AccessToken:
          type: string
        RefreshToken:
          type: string

    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          example: User Logout Successfully
      required:
        - message

    TokenRefreshResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      required:
        - accessToken
        - refreshToken

    UserChannelProfile:
      type: object
      properties:
        fullName:
          type: string
        username:
          type: string
        subscribersCount:
          type: integer
        channelSubscribedToCount:
          type: integer
        isSubscribed:
          type: boolean
        avatar:
          type: string
        coverImage:
          type: string
        email:
          type: string
      required:
        - fullName
        - username
        - subscribersCount
        - channelSubscribedToCount
        - isSubscribed
        - avatar
        - coverImage
        - email

    ApiResponse:
      type: object
      properties:
        statusCode:
          type: integer
        data:
          type: object
        message:
          type: string
        success:
          type: boolean
      required:
        - statusCode
        - data
        - message
        - success

    CommentList:
      type: array
      items:
        $ref: '#/components/schemas/Comment'
    Comment:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        createdAt:
          type: string
        owner:
          type: object
          properties:
            id:
              type: string
            username:
              type: string
            fullName:
              type: string
              nullable: true
            avatar:
              type: string
              nullable: true
      required:
        - id
        - content
        - createdAt
        - owner

    ChannelStats:
      type: object
      properties:
        _id:
          type: string
          description: The ID of the channel.
        totalviews:
          type: integer
          description: Total views of all videos belonging to the channel.
        totalVideo:
          type: integer
          description: Total number of videos uploaded by the channel.
        totalLikes:
          type: integer
          description: Total number of likes received on all videos belonging to the channel.
        totalSubscriber:
          type: integer
          description: Total number of subscribers to the channel.
        channeldetail:
          type: object
          properties:
            _id:
              type: string
              description: The ID of the channel owner.
            username:
              type: string
              description: Username of the channel owner.
            email:
              type: string
              format: email
              description: Email of the channel owner.
            fullName:
              type: string
              description: Full name of the channel owner.
            avatar:
              type: object
              properties:
                public_id:
                  type: string
                  description: The public ID of the avatar image.
                url:
                  type: string
                  format: uri
                  description: URL of the avatar image.
              description: Avatar details of the channel owner.
            coverImage:
              type: object
              properties:
                public_id:
                  type: string
                  description: The public ID of the cover image.
                url:
                  type: string
                  format: uri
                  description: URL of the cover image.
              description: Cover image details of the channel owner.
            createdAt:
              type: string
              format: date-time
              description: The date and time when the channel was created.
            updatedAt:
              type: string
              format: date-time
              description: The date and time when the channel was last updated.
          description: Details of the channel owner.
      required:
        - _id
        - totalviews
        - totalVideo
        - totalLikes
        - totalSubscriber
        - channeldetail

    ChannelVideos:
      type: array
      items:
        $ref: '#/components/schemas/Video'

    Video:
      type: object
      properties:
        videoFile:
          type: string
          description: URL or path to the video file
        thumbnail:
          type: string
          description: URL or path to the video thumbnail image
        title:
          type: string
          description: Title of the video
        description:
          type: string
          description: Description of the video
        views:
          type: integer
          description: Number of views the video has received
        duration:
          type: string
          description: Duration of the video

    ApiError:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        message:
          type: string
        errors:
          type: array
          items:
            type: string
      required:
        - statusCode
        - message
